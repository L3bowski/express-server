html {
  height: 100%;
}

body {
  margin: 0;
  min-height: 100%;
  font-family: 'Raleway', sans-serif;
  overflow: hidden;
}

$buttonSize: 100px;
$ballSize: 15px;
$parabolasNumber: 50;
$framesNumber: 40;

.cover {
  position: absolute;
  left: calc(50% - #{$buttonSize / 2});
  top: calc(50% - #{$buttonSize / 2});
  z-index: 2;
  height: $buttonSize;
  width: $buttonSize;
  border-radius: $buttonSize / 2;
  outline: none;
  border: none;
}

.ball {
  position: absolute;
  left: calc(50% - #{$ballSize / 2});
  top: calc(50% - #{$ballSize / 2});
  width: $ballSize;
  height: $ballSize;
  border-radius: $ballSize/2;
  background-color: red;
}

$framesNumber: 20;
$frameWeight: 100 / $framesNumber;
$thresholdFrame: $framesNumber * 0.5;

@mixin experiment($xTarget, $yTarget) {

    $yPeak: min(abs($yTarget) * -0.3, $xTarget / -2);
    $step: abs($yPeak) / ($thresholdFrame / 2);
    $realPeak: ($yPeak * $yPeak) / 10;

    @for $i from 0 through $framesNumber {
      $percent: ($i*$frameWeight)+%;
      #{$percent} {
        $x: ($xTarget / $framesNumber) * $i;
        
        $aux: $yPeak + $step * $i;
        $y: ($aux * $aux) / 10 - $realPeak;

        @if ($i > $thresholdFrame) {
          $y: ($yTarget / ($framesNumber - $thresholdFrame)) * ($i - $thresholdFrame);
        }
        transform: translate(#{$x}vw, #{$y}vh);
      }
    }
}

@mixin cross-browser($direction, $animationTime, $distance, $height) {

    $curve: -$animationTime * $height;
    $stepValue: $distance / $framesNumber;
    $step: abs($curve) / ($framesNumber / 2);
    $yMaxValue: ($curve * $curve) / 10;
    $offset: $curve + $step * ($framesNumber / 4);
    $offset: ($offset * $offset) / 10;

    @for $i from 0 through $framesNumber {
      $percent: (100 * $i / $framesNumber)+%;
      #{$percent} {
        $aux: $curve + $step * ($i + $framesNumber / 4);
        $y: ($aux * $aux) / 10 - $offset;
        transform: translate(#{$direction * $stepValue * $i}vw, #{$y}vh);
        opacity: 1;
      }
    }
}

@mixin parabola-mixin($parabolaNumber, $direction, $animationTime, $distance, $height) {

  @keyframes parabola-keyframe-#{$parabolaNumber} {
    // @include experiment(random(55) * $direction, 50 + random(15));
    @include cross-browser($direction, $animationTime, $distance, $height);
  }

  @-webkit-keyframes parabola-keyframe-#{$parabolaNumber} {
    // @include experiment(random(55) * $direction, 50 + random(15));
    @include cross-browser($direction, $animationTime, $distance, $height);
  }

  .parabola.trajectory-#{$parabolaNumber} {
    animation: parabola-keyframe-#{$parabolaNumber} $animationTime+s;
    animation-fill-mode: forwards;
    -webkit-animation: parabola-keyframe-#{$parabolaNumber} $animationTime+s;
    -webkit-animation-fill-mode: forwards;
  }
}

@for $i from 1 through $parabolasNumber {
    $direction: 1;
    @if($i % 2 == 0) {
      $direction: -1;
    }
    @include parabola-mixin($i, $direction, 3, random(70), random(10));
}
